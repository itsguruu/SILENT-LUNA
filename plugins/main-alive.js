const config = require("../settings");
const { malvin } = require('../malvin');
const moment = require('moment-timezone');
const os = require('os');
const { runtime } = require('../lib/functions');

const botStartTime = Date.now();
const ALIVE_IMG = config.ALIVE_IMAGE || 'https://url.bwmxmd.online/Adams.0dhfcjpi.jpeg';
const NEWSLETTER_JID = config.NEWSLETTER_JID || '120363299029326322@newsletter';
const AUDIO_URL = config.AUDIO_URL || 'https://files.catbox.moe/pjlpd7.mp3';

// Tiny caps mapping for lowercase letters
const tinyCapsMap = {
  a: '·¥Ä', b: ' ô', c: '·¥Ñ', d: '·¥Ö', e: '·¥á', f: '“ì', g: '…¢', h: ' ú', i: '…™',
  j: '·¥ä', k: '·¥ã', l: ' ü', m: '·¥ç', n: '…¥', o: '·¥è', p: '·¥ò', q: 'q', r: ' Ä',
  s: 's', t: '·¥õ', u: '·¥ú', v: '·¥†', w: '·¥°', x: 'x', y: ' è', z: '·¥¢'
};

// Function to convert string to tiny caps
const toTinyCaps = (str) => {
  return str
    .split('')
    .map((char) => tinyCapsMap[char.toLowerCase()] || char)
    .join('');
};

malvin({
  pattern: 'alive',
  alias: ['uptime', 'runtime', 'test'],
  desc: 'Check if the bot is active.',
  category: 'info',
  react: 'üöÄ',
  filename: __filename,
}, async (malvin, mek, m, { reply, from, pushname }) => {
  try {
    const uptime = runtime(process.uptime());
    const usedRam = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
    const totalRam = (os.totalmem() / 1024 / 1024).toFixed(2);

    const caption = `
*‚îè‚îÄ„Äî${pushname}„Äï‚îÄ‚ä∑*
*‚îá ·¥ú·¥ò·¥õ…™·¥ç·¥á: ${uptime}*
*‚îá  ô·¥è·¥õ …¥·¥Ä·¥ç·¥á: ${config.BOT_NAME}*
*‚îá ·¥è·¥°…¥·¥á Ä: ${config.OWNER_NAME}*
*‚îó‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ä∑*
> ·¥ç·¥Ä·¥Ö·¥á  ô è ·¥ç·¥Ä Ä…™s·¥á ü
`.trim();

    const buttons = [
      {
        buttonId: "action",
        buttonText: { displayText: "·¥ç·¥á…¥·¥ú ·¥è·¥ò·¥õ…™·¥è…¥Íú±" },
        type: 4,
        nativeFlowInfo: {
          name: "single_select",
          paramsJson: JSON.stringify({
            title: "·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á",
            sections: [
              {
                title: "·¥ç·¥á Ä·¥Ñ·¥á·¥Ö·¥ás",
                highlight_label: "",
                rows: [
                  {
                    title: "·¥ç·¥á…¥·¥ú",
                    description: "·¥è·¥ò·¥á…¥ ·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±",
                    id: `${config.PREFIX}menu`,
                  },
                  {
                    title: "·¥è·¥°…¥·¥á Ä",
                    description: "·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä",
                    id: `${config.PREFIX}owner`,
                  },
                  {
                    title: "·¥ò…™…¥…¢",
                    description: "·¥õ·¥áÍú±·¥õ  ô·¥è·¥õ Íú±·¥ò·¥á·¥á·¥Ö",
                    id: `${config.PREFIX}ping`,
                  },
                  {
                    title: "Íú± èÍú±·¥õ·¥á·¥ç",
                    description: "Íú± èÍú±·¥õ·¥á·¥ç …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥",
                    id: `${config.PREFIX}system`,
                  },
                  {
                    title: " Ä·¥á·¥ò·¥è",
                    description: "…¢…™·¥õ ú·¥ú ô  Ä·¥á·¥ò·¥èÍú±…™·¥õ·¥è Ä è",
                    id: `${config.PREFIX}repo`,
                  },
                ],
              },
            ],
          }),
        },
      },
    ];

    await malvin.sendMessage(from, {
      buttons,
      headerType: 1,
      viewOnce: true,
      image: { url: ALIVE_IMG },
      caption,
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: NEWSLETTER_JID,
          newsletterName: toTinyCaps('ùñíùñÜùñóùñéùñòùñäùñë'),
          serverMessageId: 143,
        },
      },
    }, { quoted: mek });

    // Send audio if configured
    if (AUDIO_URL) {
      await malvin.sendMessage(from, {
        audio: { url: AUDIO_URL },
        mimetype: 'audio/mp4',
        ptt: true,
      }, { quoted: mek });
    }

  } catch (error) {
    console.error('‚ùå Error in alive command:', error.message);
    await malvin.sendMessage(from, { react: { text: "‚ùå", key: mek.key } });
    const errorMessage = toTinyCaps(`
      An error occurred while processing the alive command.
      Error Details: ${error.message}
      Please report this issue or try again later.
    `).trim();
    return reply(errorMessage);
  }
});
